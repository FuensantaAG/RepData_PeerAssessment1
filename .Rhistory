load("C:/Users/Fuen/Dropbox/Materiales varios R/atheism.RData")
table(atheism$nationality)
load(url("http://bit.ly/dasi_gss_data"))
data=subset(gss,year==2012 & sex=="Female")
qqnorm(data$agekdbrn~degree)
qqnorm(data$agekdbrn)
qqnorm(data$agekdbrn,title="Lt High School")
qqnorm?
?qqnorm
qqnorm(data$agekdbrn,main="Lt High School")
table(data$degree)
ageLT
ageLT=subset(data,degree=="LT High School")
ageLT
mfrow=c(1,5)
qqnorm(ageLT$agekdbrn,main="Lt High School")
qqnorm(ageHS$agekdbrn,main="High School")
ageLT=subset(data,degree=="Lt High School")
ageHS=subset(data,degree=="High School")
ageJC=subset(data,degree=="Junior College")
ageB=subset(data,degree=="Bachelor")
ageG=subset(data,degree=="Graduate")
mfrow=c(1,5)
qqnorm(ageLT$agekdbrn,main="Lt High School")
qqnorm(ageHS$agekdbrn,main="High School")
qqnorm(ageJC$agekdbrn,main="Junior College")
qqnorm(ageB$agekdbrn,main="Bachelor")
qqnorm(ageG$agekdbrn,main="Graduate")
?mfrow
View(data)
dataprint=data[,3:22]
dataprint
head(dataprint)
dataprint=data[,2:4-6]
dataprint=data[,2:4]
dataprint=data.frame[data$year,data$sex,data$degree,data$agekdbrn]
dataprint=data.frame(data$year,data$sex,data$degree,data$agekdbrn)
library("swirl")
install.packages("swirl")
swirl()
library(swil)
library(swirl)
swirl()
swirl()
install_from_swirl("R_Programming")
swirl()
exit
0
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
x*2+100
z*2+100
mySqrt<-sqrt(z-1)
mySqurt
mySqrt
mydiv<-z/mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,10)
c(1,2,3,4)+c(0,10,100)
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along/my_seq
seq_along(my_seq)
rep(0,40)
rep(0,times=40)
rep(c(0,1,2),10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each/1/)
rep(c(0,1,2),each=10)
c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
num_vect<1
tf<-num_vect<1
tf
var<-num_vect>=6
num_vect>=6
my_char<-c("My","name")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char, "Fuensanta")
my_name
paste(my_name,collapse=" ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData<-sample(c(y,z),100)
is.na()
is.na(myData)
myNA<-is.na(myData)
myNA
myData==NA
sum(myNA)
myData
0_0
0/0
Inf-INf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
vect<-c(11,2,NA)
names(vect)=("foo","bar","norf")
info()
?names()
names(vect)<-C("foo","bar","norf")
names(vect)<-list("foo","bar","norf")
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
hello
info()
skip()
vect[c("foo","bar")]
myVector<-c(1:20)
myVector<-rep(1:20)
myVector<-1:20
myVecctor
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix=myVector
myMatrix<-myVector
?matriz
?matrix
myMatrix2(1:20,4,5)
myMatrix2<-(1:20,4,5)
myMatrix2<-matrix(1:20,4,5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients,myMatrix)
myData
class(myData)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData,cnames)
colnames(myData)
colnames(myData)<-cnames
myData
exit
install.packages("Rcmdr")
library("Rcmdr", lib.loc="C:/Users/Fuen/Documents/R/win-library/3.1")
install.packages("Rcmdr")
library("Rcmdr", lib.loc="C:/Users/Fuen/Documents/R/win-library/3.1")
dim(data)
library("Rcmdr", lib.loc="C:/Users/Fuen/Documents/R/win-library/3.1")
library("Rcmdr", lib.loc="C:/Users/Fuen/Documents/R/win-library/3.1")
View(Datos)
attach(Datos)
mosaicplot(g_grado,sexo)
mosaicplot(g_grado,g_sexo)
mosaicplot(g_grado,g_sexo)
?mosaicplot
mosaicplot(g_grado)
summary(g_grado)
library(vcd)
install.packages("vcd")
library(vcd)
library(grid)
library(vcd)
mosaic(g_grado)
?mosaic
library(MASS)
data("Titanic")
mosaic(Titanic)
Titanic
?mosaic
sex_grado=table(g_sexo,g_grado)
mosaicplot(sex_grado)
sex_grado_plat=table(g_sexo,g_grado,UPCT)
sex_grado_plat=table(g_sexo,g_grado,upct)
mosaicplot(sex_grado)
mosaic(sex_grado)
mosaicplot(sex_grado_plat)
todos=table(g_sexo,g_grado,upct,curso)
mosaicplot(todos)
mosaic(todos)
mosaic(sex_grado, shade=TRUE, legend=TRUE)
mosaic(todos, shade=TRUE, legend=TRUE)
mosaic(todos, shade=TRUE, legend=TRUE, main="Mosaic plot de los factores sociodemográficos de la encuesta")
mosaic(todos, shade=TRUE, legend=TRUE, main="Mosaic plot de los factores sociodemográficos")
mosaic(todos, shade=TRUE, legend=TRUE, main="Mosaic plot de los factores sociodemográficos", xlab=Curso)
mosaic(todos, shade=TRUE, legend=TRUE, main="Mosaic plot de los factores sociodemográficos", xlab="Curso")
mosaic(todos, shade=TRUE, legend=TRUE, main="Mosaic plot de los factores sociodemográficos")
?mosaic
mosaic(todos, main="Mosaic plot de los factores sociodemográficos")
library("Rcmdr", lib.loc="C:/Users/Fuen/Documents/R/win-library/3.1")
qt(0.0066,9)
qt(0.0066,9,lower.tail=FALSE)
qt(0.0066/2,9,lower.tail=FALSE)
qt(0.99,9)
248.3-244.8-qt(0.99,9)*3.5/qt(0.0066/2,9,lower.tail=FALSE)
248.3-244.8+qt(0.99,9)*3.5/qt(0.0066/2,9,lower.tail=FALSE)
248.3-244.8+qt(0.99,18)*3.5/qt(0.0066/2,18,lower.tail=FALSE)
248.3-244.8-qt(0.99,18)*3.5/qt(0.0066/2,18,lower.tail=FALSE)
qf(0.03,2,828,lower.tail=FALSE)
library(vcd)
library(grid)
.test<-as.table(matrix(c(1, 2, 3, 4, 5, 6), nrow=3, ncol=2, byrow=TRUE))
.test<-prop.table(.test, 1)
.test1<-as.table(matrix(c(1, 2, 3, 4), nrow=2, ncol=2, byrow=TRUE))
.test1<-prop.table(.test1, 1)
dimnames(.test)<-list("Fluoride Cluster"=c('Beneficial\nand Safe', 'Mixed Opinion', 'Harmful With No Benefits'), "Governments Should Not Impose Treatment"=c('Agree', 'Disagree'))
dimnames(.test1)<-list("Vaccines Are Too Much To Handle"= c('Agree' , 'Disagree'), "Governments Should Not Oblige Treatment" =c('Agree', 'Disagree'))
grid.newpage()
pushViewport(viewport(layout=grid.layout(1,2)))
pushViewport(viewport(layout.pos.col=1))
mosaic(.test, gp=shading_hsv, pop=FALSE, split_verticaL=FALSE, newpage=FALSE, labeling_args=list(offset_varnames=c(top=3), offset_labels=c(top=2)))
labeling_cells(text=round(prop.table(.test, 1), 2)*100, clip=FALSE)(.test)
popViewport()
pushViewport(viewport(layout.pos.col=2))
mosaic(.test1, gp=shading_hsv, newpage=FALSE,pop=FALSE, split_vertical=FALSE, labeling_args=list(offset_varnames=c(top=3), offset_labels=c(top=2)))
labeling_cells(text=round(prop.table(.test1, 1), 2)*100, clip=FALSE)(.test1)
popViewport(2)
library("Rcmdr", lib.loc="C:/Users/Fuen/Documents/R/win-library/3.1")
Datos
data2=c(56,24,12,70,11,13,101,30,17,101,33,23,25,0,0,31,0,0,26,0,0,33,0,0)
dim(data2)=c(3,2,2,2)
dimnames(data2)=list(Grado=c("ADE","Economia","Marketing"),Sexo=c("Hombre","Mujer"),Curso=c("Primero","Superior"),Universidad=c("UMU","UPCT"))
mosaicplot(data2, col = hcl(c(240,120)),
main = "Factores sociodemográficos",off=c(5,5,5,5))
labs<-round(prop.table(data2),2)
labs
labs<-round(prop.table(data2),2)*100
labs<-round(prop.table(data2),2)*100
labs
labs<-round(prop.table(data2),4)*100
labs
labs<-round(prop.table(data2),3)*100
mosaic(data2,pop=FALSE)
labeling_cells(text=labs,margin=0)(data2)
labs=round(prop.table(Titanic),2)
mosaic(Titanic,pop=FALSE)
labeling_cells(text=labs,margin=0)(Titanic)
labs=round(prop.table(Titanic),3)*100
mosaic(Titanic,pop=FALSE)
labeling_cells(text=labs,margin=0)(Titanic)
mosaic(data2,pop=FALSE)
labs=round(prop.table(data2),3)*100
labs
data2
mosaic(data2,pop=FALSE)
labeling_cells(text=labs,margin=0)
labeling_cells(text=labs,margin=0)(data2)
ifelse(data2=0,NA,data2)
ifelse(data2==0,NA,data2)
labs=round(prop.table(data2),3)*100
labs
mosaic(data2,pop=FALSE)
labeling_cells(text=labs,margin=0)(data2)
data2=c(56,24,12,70,11,13,101,30,17,101,33,23,25,5,5,31,5,5,26,5,5,33,5,5)
dim(data2)=c(3,2,2,2)
dimnames(data2)=list(Grado=c("ADE","Economia","Marketing"),Sexo=c("Hombre","Mujer"),Curso=c("Primero","Superior"),Universidad=c("UMU","UPCT"))
mosaicplot(data2, col = hcl(c(240,120)),
main = "Factores sociodemográficos",off=c(5,5,5,5))
labs=round(prop.table(data2),3)*100
mosaic(data2,pop=FALSE)
labeling_cells(text=labs,margin=0)(data2)
Titanic
mosaic(Titanic,pop=FALSE)
?pop
?mosaic
mosaic(Titanic)
mosaic(Titanic,pop=FALSE)
labs=round(prop.table(Titanic),3)*100
labeling_cells(text=labs,margin=0)(Titanic)
mosaic(Titanic,pop=FALSE,color=TRUE)
mosaic(Titanic,pop=FALSE,color=hcl(c(120,210)))
mosaicplot(Titanic,pop=FALSE,color=hcl(c(120,210)))
mosaicplot(Titanic,color=hcl(c(120,210)))
mosaicplot(Titanic,pop=FALSE,color=hcl(c(120,210)))
labeling_cells(text=labs,margin=0)(Titanic)
data=c(56,101,24,30,12,17,70,101,11,33,13,23,25,26,0,0,0,0,31,33,0,0,0,0)
dim(data)=c(2,3,2,2)
dimnames(data)=list(Curso=c("Primero","Superior"),Grado=c("ADE","Economia","Marketing"),Sexo=c("Hombre","Mujer"),Universidad=c("UMU","UPCT"))
mosaicplot(data, col = hcl(c(240,120)),
main = "Factores sociodemográficos",off=c(5,5,5,5))
labs=round(prop.table(data),3)*100
labs
mosaic(data,pop=FALSE)
labeling_cells(text=labs,margin=0)(data)
Titanic
labs=table(Titanic)
labs
table(Datos)
table(Datos$g_sexo)
table(Datos$g_sexo,Datos$g_grado)
table(Datos$g_sexo,Datos$g_grado,Datos$curso)
table(Datos$g_sexo,Datos$g_grado,Datos$curso,Datos$upct)
table(Datos$curso,Datos$g_grado,Datos$g_sexo,Datos$upct)
data
prueba=table(Datos$curso,Datos$g_grado,Datos$g_sexo,Datos$upct)
prueba
mosaicplot(prueba)
mosaic(prueba)
dimnames(prueba)=list(Curso=c("Primero","Superior"),Grado=c("ADE","Economia","Marketing"),Sexo=c("Hombre","Mujer"),Universidad=c("UMU","UPCT"))
mosaic(prueba)
mosaic(prueba)
mosaicplot(prueba)
mosaic(prueba)
mosaic(prueba)
labs=round(prop.table(prueba),2)
labs
labs=round(prop.table(prueba),2)*100
mosaic(prueba,pop=FALSE)
labeling_cells(text=labs,margin=0)(prueba)
labs=round(prop.table(prueba),3)*100
labeling_cells(text=labs,margin=0)(prueba)
mosaic(prueba,pop=FALSE)
labeling_cells(text=labs,margin=0)(prueba)
mosaic(prueba,pop=FALSE,color=TRUE)
mosaic(prueba,gp=gpar(fill=c("gray","dark magenta")),spacing=spacing_highlighting,labeling_args=list=abbreviate=c(Sexo=3))
mosaic(prueba, gp = gpar(fill = c("gray", "dark magenta")),spacing = spacing_highlighting, labeling_args = list(abbreviate = c(Sexo = 3)))
mosaic(prueba)
mosaic(prueba, gp = gpar(fill = c("gray", "dark magenta")))
prueba=table(Datos$curso,Datos$g_grado,Datos$g_sexo,Datos$upct)
dimnames(prueba)=list(Curso=c("Primero","Superior"),Grado=c("ADE","Economia","Marketing"),Sexo=c("Hombre","Mujer"),Universidad=c("UMU","UPCT"))
labs <- round(prop.table(prueba), 3)*100
mosaic(prueba, pop = FALSE)
labeling_cells(text = labs, margin = 0)(prueba)
mosaic(prueba,  gp = gpar(fill = c("gray", "dark magenta")), pop = FALSE)
labeling_cells(text = labs, margin = 0)(prueba)
labs <- table(prueba)
labs
labs=prueba
labs
mosaic(prueba,  gp = gpar(fill = c("gray", "dark magenta")), pop = FALSE)
labeling_cells(text = labs, margin = 0)(prueba)
library(foreign, pos=4)
Datos <-
read.spss("C:/Users/Fuen/Dropbox/Proyecto Educacion/Colaboración con UPCT/Murcia_Cartagena_Total.sav",
use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
colnames(Datos) <- tolower(colnames(Datos))
library("Rcmdr", lib.loc="C:/Users/Fuen/Documents/R/win-library/3.1")
prueba=table(Datos$curso,Datos$g_grado,Datos$g_sexo,Datos$upct)
labs <- round(prop.table(prueba), 3)*100 ## frec relativas conjuntas
labs <- prueba ## frec absolutas conjuntas
mosaic(prueba,  gp = gpar(fill = c("gray", "dark magenta")), pop = FALSE)
library(vcd)
mosaic(prueba,  gp = gpar(fill = c("gray", "dark magenta")), pop = FALSE)
mosaic(prueba,  pop = FALSE)
prueba=table(Datos$curso,Datos$g_grado,Datos$g_sexo,Datos$upct)
dimnames(prueba)=list(Curso=c("Primero","Superior"),Grado=c("ADE","Economia","Marketing"),Sexo=c("Hombre","Mujer"),Universidad=c("UMU","UPCT"))
labs <- prueba ## frec absolutas conjuntas
mosaic(prueba,  pop = FALSE)
mosaic(prueba,  gp = gpar(fill = c("gray", "dark magenta")), pop = FALSE)
mosaic(prueba,  gp = gpar(fill = c("gray", "dark magenta")), pop = FALSE)
labeling_cells(text = labs, margin = 0)(prueba)
mosaic(prueba,  gp = gpar(fill = c("gray", "dark magenta")), pop = FALSE)
detach("package:Rcmdr", unload=TRUE)
library("Rcmdr", lib.loc="C:/Users/Fuen/Documents/R/win-library/3.1")
mosaic(prueba,  gp = gpar(fill = c("gray", "dark magenta")), pop = FALSE)
library(foreign, pos=4)
Datos <-
read.spss("C:/Users/Fuen/Dropbox/Proyecto Educacion/Colaboración con UPCT/Murcia_Cartagena_Total.sav",
use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
colnames(Datos) <- tolower(colnames(Datos))
prueba=table(Datos$curso,Datos$g_grado,Datos$g_sexo,Datos$upct)
attach(Datos)
prueba2=table(g_grado,g_sexo,upct,curso)
labs <- prueba2 ## frec absolutas conjuntas
mosaic(prueba2,  gp = gpar(fill = c("gray", "dark magenta")), pop = FALSE)
library(vcd)
mosaic(prueba2,  gp = gpar(fill = c("gray", "dark magenta")), pop = FALSE)
mosaic(prueba2,  gp = gpar(fill = c("blue", "green")), pop = FALSE)
mosaic(prueba2,  gp = gpar(fill = c("blue", "light green")), pop = FALSE)
mosaic(prueba2,  gp = gpar(fill = c("light blue", "light green")), pop = FALSE)
mosaic(prueba2,  gp = gpar(fill = c("light blue", "pale green")), pop = FALSE)
mosaic(prueba2,  gp = gpar(fill = c("light blue", "light pink")), pop = FALSE)
mosaic(prueba2,  gp = gpar(fill = c("light blue", "pink")), pop = FALSE)
prueba2=table(g_sexo,g_grado,upct,curso)
labs <- prueba2 ## frec absolutas conjuntas
mosaic(prueba2,  gp = gpar(fill = c("light blue", "pink")), pop = FALSE)
labeling_cells(text = labs, margin = 0)(prueba)
dimnames(prueba2)=list(Sexo=c("Hombre","Mujer"),Grado=c("ADE","Economia","Marketing"),Universidad=c("UMU","UPCT"),Curso=c("Primero","Superior"))
labs <- prueba2 ## frec absolutas conjuntas
mosaic(prueba2,  gp = gpar(fill = c("light blue", "pink")), pop = FALSE)
labeling_cells(text = labs, margin = 0)(prueba)
prueba2=table(g_sexo,g_grado,upct,curso)
dimnames(prueba2)=list(Sexo=c("Hombre","Mujer"),Grado=c("ADE","Economia","Marketing"),Universidad=c("UMU","UPCT"),Curso=c("Primero","Superior"))
labs <- prueba2 ## frec absolutas conjuntas
mosaic(prueba2,  gp = gpar(fill = c("light blue", "pink")), pop = FALSE)
labeling_cells(text = labs, margin = 0)(prueba)
labeling_cells(text = labs, margin = 0)(prueba2)
mosaic(prueba2,  gp = gpar(fill = c("light blue", "light green")), pop = FALSE)
labeling_cells(text = labs, margin = 0)(prueba2)
#Lo de la tabla se hace superrápido con table:
attach(Datos)
definitivo=table(g_sexo,g_grado,upct,curso)
#Con mosaic llevaría los nombres, con mosaicplot habría que ponerlos.
dimnames(definitivo)=list(Sexo=c("Hombre","Mujer"),Grado=c("ADE","Economia","Marketing"),Universidad=c("UMU","UPCT"),Curso=c("Primero","Superior"))
labs <- round(prop.table(definitivo), 3)*100 ## frec relativas conjuntas
labs <- definitivo ## frec absolutas conjuntas
library(vcd)
mosaic(definitivo,  gp = gpar(fill = c("light blue", "light green")), pop = FALSE)
labeling_cells(text = labs, margin = 0)(definitivo)
mosaic(definitivo,  gp = gpar(fill = c("light yellow", "light green")), pop = FALSE)
mosaic(definitivo,  gp = gpar(fill = c("light yellow", "blue")), pop = FALSE)
mosaic(definitivo,  gp = gpar(fill = c("light yellow", "ligthblue")), pop = FALSE)
mosaic(definitivo,  gp = gpar(fill = c("light yellow", "ligth blue")), pop = FALSE)
mosaic(definitivo,  gp = gpar(fill = c("light yellow", "light blue")), pop = FALSE)
labeling_cells(text = labs, margin = 0)(definitivo)
load("C:/Users/Fuen/Dropbox/Cursos y material de ayuda/Coursera Specialization Data Analysis/Exploratory data analysis/.RData")
View(Datos)
View(Datos)
View(Datos)
table(newdata$Global_reactive_power)
summary(newdata$Global_reactive_power)
View(data)
summary(newdata)
newdata2<-newdata[which(newdata$Global_active_power!="?",]
newdata2<-newdata[which(newdata$Global_active_power!="?"),]
View(newdata2)
summary(newdata2$Global_active_power)
hist(newdata2$Global_active_power)
write.csv(newdata2,newdata2.csv)
write.csv(newdata2,"newdata2.csv")
getwd()
data<-read.csv("activity.csv")
setwd("C:/Users/Fuen/Dropbox/GITHUB/RepData_PeerAssessment1")
data<-read.csv("activity.csv")
hist(NumberSteps)
NumberSteps<-aggregate(steps~date,data=data,sum,na.rm=TRUE)
data<-read.csv("activity.csv")
NumberSteps<-aggregate(steps~date,data=data,sum,na.rm=TRUE)
NumberSteps
hist(NumberSteps$steps)
mean(NumberSteps$steps)
StepsPerInterval<-aggregate(steps~interval,data=data,sum,na.rm=TRUE)
plot(StepsPerInterval$interval,StepsPerInterval$date)
plot(StepsPerInterval$steps,StepsPerInterval$interval)
StepsPerInterval<-aggregate(steps~interval,data=data,mean,na.rm=TRUE)
mean(StepsPerInterval$steps)
StepsPerInterval<-aggregate(steps~interval,data=data,sum,na.rm=TRUE)
mean(StepsPerInterval$steps)
plot(AverageStepsPerInterval$interval,AverageStepsPerInterval$steps)
plot(AverageStepsPerInterval$interval,AverageStepsPerInterval$steps,type="l")
data<-read.csv("activity.csv")
TotalStepsPerDay<-aggregate(steps~date,data=data,sum,na.rm=TRUE)
AverageStepsPerInterval<-aggregate(steps~interval,data=data,mean,na.rm=TRUE)
plot(AverageStepsPerInterval$interval,AverageStepsPerInterval$steps,type="l")
plot(AverageStepsPerInterval$interval,AverageStepsPerInterval$steps,type="l",xlab="Day Interval",ylab="Average number of steps",title="Average number of steps by Day Interval")
plot(AverageStepsPerInterval$interval,AverageStepsPerInterval$steps,type="l",xlab="Day Interval",ylab="Average number of steps",tittle="Average number of steps by Day Interval")
plot(AverageStepsPerInterval$interval,AverageStepsPerInterval$steps,type="l",xlab="Day Interval",ylab="Average number of steps",main="Average number of steps by Day Interval")
Which.max(AverageStepsPerInterval$steps)
which.max(AverageStepsPerInterval$steps)
AverageStepsPerInterval$steps
summary(AverageStepsPerInterval$steps)
AverageStepsPerInterval
max(AverageStepsPerInterval$steps)
which.max(AverageStepsPerInterval$steps)
interval.max<-[which.max(AverageStepsPerInterval$steps),]
interval.max<-AverageStepsPerInterval[which.max(AverageStepsPerInterval$steps),]
interval.max
interval.max<-AverageStepsPerInterval[which.max(AverageStepsPerInterval$steps),]$interval
interval.max
length<-nrows(data)
length<-nrow(data)
data_complete<-complete.cases(data)
data_complete
nrow(complete.cases(data))
sum(complete.cases(data))
length(data)-sum(complete.cases(data))
length(data)
data
nrow(data)
nrow(data)-sum(complete.cases(data))
